can we write a bash script that checks a modified file in a commit and categorizes that file "new work" if the modified lines not replace other lines but rather be written from scratch and independently. Lines added as part of an existing change (git hunk) do not count as new work.


can we write a bash script that checks a modified file in a commit and categorizes that file "refactor" if last modification of the file is older that 3 weeks

can we write a bash script that checks a modified file in a commit and categorizes that file "help others" if last modification of the file is done by another author and the last modification is not older than 3 weeks.


can we combine "refactor" and "help others" in a way that our script;

- first checks a file in a commit for whether it is a "refactor" or not
- if not than it will check for whether it is "help others" or not


can we  extend our combined script in a way that;

- first checks a file in a commit for whether it is a "refactor" or not
- if not than it will check for whether it is "help others" or not
- if not than it will check whether it is "new work" or not
- if not than it will categorize the file as "churn/rework"


can we change the script that it reads commits within a git repository and checks them


In the script while we get LAST_MODIFIED_AUTHOR and LAST_MODIFIED_DATE information it gets LAST_MODIFIED_DATE wrong because LAST_MODIFIED_INFO output is like;

john doe 1735023133

and when we get LAST_MODIFIED_DATE within

LAST_MODIFIED_DATE=$(echo "$LAST_MODIFIED_INFO" | awk '{print $2}')

it gets surname of the author


can we limit the commits so that we check only for commits occured within 24 hours

I have modified the script so that it will output every commit and its files in json format. I also want to add details about file modifications like inserted and deleted lines if exists to the file info and also add total line insertions and deletions to the commit info. Can you modify below script accordingly;

#!/bin/bash

# Initialize JSON output
output="{\"total_commits_processed\": 0, \"commits\": []}"

# Define the threshold for "refactor" and "help others" (3 weeks in seconds)
REFACTOR_THRESHOLD=$((3 * 7 * 24 * 60 * 60))
HELP_OTHERS_THRESHOLD=$((3 * 7 * 24 * 60 * 60))

# Get the list of commits in the last 24 hours
COMMITS=$(git log --since="1 week ago" --pretty=format:"%H")

# Check if there are any commits in the last 24 hours
if [ -z "$COMMITS" ]; then
  echo "No commits found in the last week."
  exit 0
fi

# Iterate through each commit
for COMMIT_HASH in $COMMITS; do
  
  files_json="[]"
  #echo "Analyzing commit: $COMMIT_HASH"

  # Get the current author name and email of the commit
  CURRENT_AUTHOR=$(git log -1 --pretty=format:"%an" "$COMMIT_HASH")
  CURRENT_AUTHOR_EMAIL=$(git log -1 --pretty=format:"%ae" "$COMMIT_HASH")

  # Print the author name and email
  #echo "  Author: $CURRENT_AUTHOR <$CURRENT_AUTHOR_EMAIL>"

  # Get the list of modified files in the commit
  MODIFIED_FILES=$(git diff-tree --no-commit-id --name-only -r "$COMMIT_HASH")

  for FILE in $MODIFIED_FILES; do
    #echo "  Analyzing file: $FILE"
    # Get the last modification author and date of the file before the current commit
    LAST_MODIFIED_INFO=$(git log -1 --pretty=format:"%an %ct" "$COMMIT_HASH^" -- "$FILE" 2>/dev/null)
    if [ -z "$LAST_MODIFIED_INFO" ]; then
      # If the file has no history before this commit, it's "new work"
      #echo "    Category: New Work"
      CATEGORY="New Work"
      continue
    fi

    # Extract the last modification author and date
    LAST_MODIFIED_AUTHOR=$(echo "$LAST_MODIFIED_INFO" | awk '{$NF=""; print $0}' | sed 's/ *$//')
    LAST_MODIFIED_DATE=$(echo "$LAST_MODIFIED_INFO" | awk '{print $NF}')
    # Get the current commit date
    CURRENT_COMMIT_DATE=$(git log -1 --pretty=format:%ct "$COMMIT_HASH")
    # Calculate the time difference in seconds
    TIME_DIFFERENCE=$((CURRENT_COMMIT_DATE - LAST_MODIFIED_DATE))

    # Check if the file qualifies as "refactor"
    if [ "$TIME_DIFFERENCE" -gt "$REFACTOR_THRESHOLD" ]; then
      #echo "    Category: Refactor"
      CATEGORY="Refactor"
    else
      # If not "refactor", check if it qualifies as "help others"
      if [ "$LAST_MODIFIED_AUTHOR" != "$CURRENT_AUTHOR" ] && [ "$TIME_DIFFERENCE" -le "$HELP_OTHERS_THRESHOLD" ]; then
        #echo "    Category: Help Others"
        CATEGORY="Help Others"
      else
        # If not "help others", check if it qualifies as "new work"
        DIFF=$(git diff --unified=0 "$COMMIT_HASH^" "$COMMIT_HASH" -- "$FILE")
        if echo "$DIFF" | grep -q '^+[^+]' && ! echo "$DIFF" | grep -q '^-'; then
          #echo "    Category: New Work"
          CATEGORY="New Work"
        else
          # If none of the above, categorize as "churn/rework"
          #echo "    Category: Churn/Rework"
          CATEGORY="Churn/Rework"
        fi
      fi
    fi

    # Add file details to JSON
    file_json="{\"file\": \"$FILE\", \"category\": \"$CATEGORY\"}"
    files_json=$(echo "$files_json" | jq --argjson file "$file_json" '. += [$file]')
    
  done
  #echo "------------------------"
  # Add commit details to JSON
  commit_json=$(jq -n \
      --arg hash "$COMMIT_HASH" \
      --arg author "$CURRENT_AUTHOR" \
      --arg email "$CURRENT_AUTHOR_EMAIL" \
      --arg date "$CURRENT_COMMIT_DATE" \
      --argjson files "$files_json" \
      '{hash: $hash, author: $author, email: $email, commit_date: $date, files: $files}')

  output=$(echo "$output" | jq --argjson commit "$commit_json" '.commits += [$commit]')
done

# Add total commits processed to JSON
total_commits=$(echo "$output" | jq '.commits | length')
output=$(echo "$output" | jq --argjson total "$total_commits" '.total_commits_processed = $total')

# Output the JSON
echo "$output" | jq .